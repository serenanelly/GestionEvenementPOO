package com.example.gestionevenement.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.time.LocalDateTime;
import java.util.Objects;

/**
 * Classe repr√©sentant un concert dans le syst√®me de gestion d'√©v√©nements.
 * 
 * Cette classe h√©rite de Evenement et ajoute des fonctionnalit√©s sp√©cifiques
 * aux concerts comme la gestion de l'artiste et du genre musical.
 * 
 * Principes SOLID respect√©s :
 * - SRP : G√®re uniquement les sp√©cificit√©s des concerts
 * - OCP : √âtend Evenement sans le modifier
 * - LSP : Peut remplacer Evenement dans tous les contextes
 * - ISP : Utilise les interfaces appropri√©es
 * - DIP : D√©pend de l'abstraction Evenement
 * 
 * @author Votre Nom
 * @version 1.0
 * @since 2025-05-27
 */
@XmlRootElement(name = "concert")
@JsonTypeName("concert")
public class Concert extends Evenement {
    
    @XmlElement
    @JsonProperty("artiste")
    private String artiste;
    
    @XmlElement
    @JsonProperty("genreMusical")
    private String genreMusical;

    /**
     * Constructeur par d√©faut requis pour la s√©rialisation JSON/XML.
     */
    public Concert() {
        super();
    }

    /**
     * Constructeur principal pour cr√©er un concert.
     * 
     * @param id Identifiant unique du concert
     * @param nom Nom du concert
     * @param date Date et heure du concert
     * @param lieu Lieu du concert
     * @param capaciteMax Capacit√© maximale de spectateurs
     * @param artiste Nom de l'artiste/groupe (ne peut pas √™tre null ou vide)
     * @param genreMusical Genre musical du concert (ne peut pas √™tre null ou vide)
     * @throws IllegalArgumentException si l'artiste ou le genre musical est null ou vide
     */
    @JsonCreator
    public Concert(
            @JsonProperty("id") String id,
            @JsonProperty("nom") String nom,
            @JsonProperty("date") LocalDateTime date,
            @JsonProperty("lieu") String lieu,
            @JsonProperty("capaciteMax") int capaciteMax,
            @JsonProperty("artiste") String artiste,
            @JsonProperty("genreMusical") String genreMusical) {
        
        super(id, nom, date, lieu, capaciteMax);
        
        // Validation de l'artiste
        if (artiste == null || artiste.trim().isEmpty()) {
            throw new IllegalArgumentException("Le nom de l'artiste ne peut pas √™tre null ou vide");
        }
        
        // Validation du genre musical
        if (genreMusical == null || genreMusical.trim().isEmpty()) {
            throw new IllegalArgumentException("Le genre musical ne peut pas √™tre null ou vide");
        }
        
        this.artiste = artiste.trim();
        this.genreMusical = genreMusical.trim();
    }

    /**
     * V√©rifie si le concert correspond √† un genre musical sp√©cifique.
     * 
     * @param genre Le genre √† v√©rifier (comparaison insensible √† la casse)
     * @return true si le concert correspond au genre, false sinon
     */
    public boolean estDuGenre(String genre) {
        return genre != null && this.genreMusical.equalsIgnoreCase(genre.trim());
    }

    /**
     * V√©rifie if le concert est interpr√©t√© par un artiste sp√©cifique.
     * 
     * @param nomArtiste Le nom de l'artiste √† v√©rifier (comparaison insensible √† la casse)
     * @return true si l'artiste correspond, false sinon
     */
    public boolean estInterpretePar(String nomArtiste) {
        return nomArtiste != null && this.artiste.equalsIgnoreCase(nomArtiste.trim());
    }

    /**
     * G√©n√®re une description marketing du concert.
     * 
     * @return une description format√©e du concert
     */
    public String genererDescriptionMarketing() {
        StringBuilder description = new StringBuilder();
        description.append("üéµ ").append(getNom()).append("\n");
        description.append("üé§ Avec ").append(artiste).append("\n");
        description.append("üé∏ Genre : ").append(genreMusical).append("\n");
        description.append("üìÖ Le ").append(getDate().toLocalDate()).append(" √† ").append(getDate().toLocalTime()).append("\n");
        description.append("üìç ").append(getLieu()).append("\n");
        description.append("üéüÔ∏è Places disponibles : ").append(getPlacesDisponibles()).append("/").append(getCapaciteMax());
        
        if (isAnnule()) {
            description.append("\n‚ùå CONCERT ANNUL√â");
        }
        
        return description.toString();
    }

    /**
     * Calcule le prix sugg√©r√© bas√© sur la popularit√© du genre musical.
     * (M√©thode exemple pour d√©montrer la logique m√©tier sp√©cifique aux concerts)
     * 
     * @return prix sugg√©r√© en euros
     */
    public double calculerPrixSuggere() {
        // Prix de base
        double prixBase = 25.0;
        
        // Ajustement selon le genre musical
        switch (genreMusical.toLowerCase()) {
            case "rock":
            case "pop":
                return prixBase * 1.5;
            case "classique":
            case "jazz":
                return prixBase * 1.8;
            case "√©lectronique":
            case "techno":
                return prixBase * 1.3;
            case "folk":
            case "acoustique":
                return prixBase * 1.1;
            default:
                return prixBase;
        }
    }

    /**
     * Impl√©mentation de la m√©thode abstraite pour l'annulation sp√©cifique aux concerts.
     * 
     * Cette m√©thode est appel√©e par la m√©thode annuler() de la classe parente
     * via le Template Method Pattern.
     */
    @Override
    protected void onAnnulation() {
        // Logique sp√©cifique √† l'annulation d'un concert
        System.out.println("=== ANNULATION DE CONCERT ===");
        System.out.println("Le concert \"" + getNom() + "\" de " + artiste + " a √©t√© annul√©.");
        System.out.println("Genre musical : " + genreMusical);
        System.out.println("Date pr√©vue : " + getDate());
        System.out.println("Lieu : " + getLieu());
        System.out.println("Spectateurs concern√©s : " + getNombreParticipants());
        
        if (getNombreParticipants() > 0) {
            System.out.println("‚ö†Ô∏è  Remboursement automatique en cours pour tous les spectateurs.");
            System.out.println("üìß Notifications d'annulation envoy√©es √† tous les participants.");
        }
        
        System.out.println("==============================");
    }

    /**
     * Affiche les d√©tails sp√©cifiques au concert.
     * 
     * Impl√©mentation de la m√©thode abstraite d√©finie dans Evenement.
     */
    @Override
    protected void afficherDetailsSpecifiques() {
        System.out.println("Artiste/Groupe: " + artiste);
        System.out.println("Genre musical: " + genreMusical);
        System.out.println("Prix sugg√©r√©: " + String.format("%.2f ‚Ç¨", calculerPrixSuggere()));
        
        // Affichage d'informations additionnelles selon le taux de remplissage
        double tauxRemplissage = (double) getNombreParticipants() / getCapaciteMax() * 100;
        System.out.println("Taux de remplissage: " + String.format("%.1f%%", tauxRemplissage));
        
        if (tauxRemplissage >= 90) {
            System.out.println("üî• CONCERT PRESQUE COMPLET !");
        } else if (tauxRemplissage >= 75) {
            System.out.println("‚≠ê Forte demande - R√©servez vite !");
        } else if (tauxRemplissage < 25) {
            System.out.println("üéüÔ∏è Encore de nombreuses places disponibles");
        }
    }

    /**
     * G√©n√®re un r√©sum√© du concert pour les notifications.
     * 
     * @return un r√©sum√© format√© du concert
     */
    public String genererResume() {
        StringBuilder resume = new StringBuilder();
        resume.append("CONCERT: ").append(getNom()).append("\n");
        resume.append("Artiste: ").append(artiste).append("\n");
        resume.append("Genre: ").append(genreMusical).append("\n");
        resume.append("Date: ").append(getDate()).append("\n");
        resume.append("Lieu: ").append(getLieu()).append("\n");
        resume.append("Spectateurs: ").append(getNombreParticipants()).append("/").append(getCapaciteMax());
        
        return resume.toString();
    }

    /**
     * V√©rifie si le concert peut encore accueillir un groupe minimum de spectateurs.
     * Utile pour les r√©servations de groupe.
     * 
     * @param tailleGroupe Taille du groupe souhait√©e
     * @return true si le groupe peut √™tre accueilli, false sinon
     */
    public boolean peutAccueillirGroupe(int tailleGroupe) {
        return tailleGroupe > 0 && 
               getPlacesDisponibles() >= tailleGroupe && 
               !isAnnule();
    }

    // Getters avec encapsulation appropri√©e
    public String getArtiste() {
        return artiste;
    }

    public String getGenreMusical() {
        return genreMusical;
    }

    // Setters prot√©g√©s pour la s√©rialisation
    protected void setArtiste(String artiste) {
        this.artiste = artiste;
    }

    protected void setGenreMusical(String genreMusical) {
        this.genreMusical = genreMusical;
    }

    /**
     * Impl√©mentation de equals incluant les attributs sp√©cifiques au Concert.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (!super.equals(obj)) return false;
        if (getClass() != obj.getClass()) return false;
        
        Concert concert = (Concert) obj;
        return Objects.equals(artiste, concert.artiste) &&
               Objects.equals(genreMusical, concert.genreMusical);
    }

    /**
     * Impl√©mentation de hashCode incluant les attributs sp√©cifiques au Concert.
     */
    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), artiste, genreMusical);
    }

    /**
     * Repr√©sentation textuelle d√©taill√©e du concert.
     */
    @Override
    public String toString() {
        return String.format("Concert{id='%s', nom='%s', artiste='%s', genre='%s', date=%s, lieu='%s', " +
                           "spectateurs=%d/%d, annule=%s}",
                getId(), getNom(), artiste, genreMusical, getDate(), getLieu(), 
                getNombreParticipants(), getCapaciteMax(), isAnnule());
    }
}